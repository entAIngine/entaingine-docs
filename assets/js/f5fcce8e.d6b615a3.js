"use strict";(self.webpackChunkentaingine_docs=self.webpackChunkentaingine_docs||[]).push([[4260],{1860:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>p,frontMatter:()=>r,metadata:()=>o,toc:()=>c});var i=t(4848),a=t(8453);const r={title:"PAL (Program-Aided Language)",slug:"/prompting-techniques/pal",sidebar_position:14,description:"Use code generation and execution to solve complex reasoning problems with high accuracy."},s=void 0,o={id:"prompting-techniques/pal",title:"PAL (Program-Aided Language)",description:"Use code generation and execution to solve complex reasoning problems with high accuracy.",source:"@site/docs/prompting-techniques/pal.mdx",sourceDirName:"prompting-techniques",slug:"/prompting-techniques/pal",permalink:"/prompting-techniques/pal",draft:!1,unlisted:!1,editUrl:"https://github.com/entAIngine/entaingine-docs/tree/main/docs/prompting-techniques/pal.mdx",tags:[],version:"current",sidebarPosition:14,frontMatter:{title:"PAL (Program-Aided Language)",slug:"/prompting-techniques/pal",sidebar_position:14,description:"Use code generation and execution to solve complex reasoning problems with high accuracy."},sidebar:"tutorialSidebar",previous:{title:"Directional Stimulus Prompting",permalink:"/prompting-techniques/directional-stimulus"},next:{title:"ReAct (Reasoning and Acting)",permalink:"/prompting-techniques/react"}},l={},c=[{value:"Core Principles",id:"core-principles",level:2},{value:"How PAL Works",id:"how-pal-works",level:2},{value:"Implementation Patterns",id:"implementation-patterns",level:2},{value:"Mathematical Problem Solving",id:"mathematical-problem-solving",level:3},{value:"Scientific Computing",id:"scientific-computing",level:3},{value:"Operations Research",id:"operations-research",level:3},{value:"Limitations and Considerations",id:"limitations-and-considerations",level:2},{value:"Execution Environment Requirements",id:"execution-environment-requirements",level:3},{value:"Code Generation Quality",id:"code-generation-quality",level:3},{value:"When NOT to Use PAL",id:"when-not-to-use-pal",level:3},{value:"Integration with Other Techniques",id:"integration-with-other-techniques",level:2},{value:"PAL + Chain-of-Thought",id:"pal--chain-of-thought",level:3},{value:"PAL + Self-Consistency",id:"pal--self-consistency",level:3},{value:"PAL + Few-Shot Learning",id:"pal--few-shot-learning",level:3},{value:"Future Developments",id:"future-developments",level:2},{value:"PAL Workflow Diagram",id:"pal-workflow-diagram",level:2},{value:"References",id:"references",level:2}];function d(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"Program-Aided Language (PAL) is a prompting technique that leverages code generation to solve complex reasoning problems. Instead of asking language models to perform calculations or logical operations directly in natural language, PAL prompts the model to write executable code that solves the problem, then uses the code's output as the final answer."}),"\n",(0,i.jsxs)(n.p,{children:["Introduced by ",(0,i.jsx)(n.a,{href:"https://arxiv.org/abs/2211.10435",children:"Gao et al. (2022)"}),", PAL significantly improves accuracy on mathematical reasoning, logical puzzles, and data manipulation tasks by offloading computational steps to reliable programming execution while maintaining the model's natural language understanding capabilities."]}),"\n",(0,i.jsx)(n.h2,{id:"core-principles",children:"Core Principles"}),"\n",(0,i.jsx)(n.p,{children:"PAL operates on the understanding that:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Language models excel at code generation"})," but may struggle with precise calculations"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Programming languages provide deterministic execution"})," that eliminates arithmetic errors"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Complex problems can be decomposed"})," into code logic plus natural language reasoning"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Verification is easier"})," when intermediate steps are explicit in code"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"how-pal-works",children:"How PAL Works"}),"\n",(0,i.jsx)(n.p,{children:"The PAL process typically follows these steps:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Problem Analysis"}),": The model analyzes the problem and identifies computational components"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Code Generation"}),": The model writes code that implements the necessary logic"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Code Execution"}),": The generated code is executed in a programming environment"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Result Integration"}),": The execution results are integrated into the final answer"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"implementation-patterns",children:"Implementation Patterns"}),"\n",(0,i.jsx)(n.h3,{id:"mathematical-problem-solving",children:"Mathematical Problem Solving"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:'Problem: "Sarah has 3 boxes with 15 apples each. She gives away 1/3 of the total apples. How many apples does she have left?"\n\nPAL Approach:\n```python\n# Calculate total apples\nboxes = 3\napples_per_box = 15\ntotal_apples = boxes * apples_per_box\nprint(f"Total apples: {total_apples}")\n\n# Calculate apples given away\nfraction_given = 1/3\napples_given = total_apples * fraction_given\nprint(f"Apples given away: {apples_given}")\n\n# Calculate remaining apples\nremaining_apples = total_apples - apples_given\nprint(f"Remaining apples: {remaining_apples}")\n'})}),"\n",(0,i.jsx)(n.p,{children:"Answer: Sarah has 30 apples left."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'\n### Data Analysis and Statistics\n\n```text\nProblem: "Given the test scores [85, 92, 78, 96, 88, 91, 84], what is the mean, median, and standard deviation?"\n\nPAL Approach:\n```python\nimport statistics\nimport math\n\nscores = [85, 92, 78, 96, 88, 91, 84]\n\n# Calculate mean\nmean_score = statistics.mean(scores)\nprint(f"Mean: {mean_score}")\n\n# Calculate median\nmedian_score = statistics.median(scores)\nprint(f"Median: {median_score}")\n\n# Calculate standard deviation\nstd_dev = statistics.stdev(scores)\nprint(f"Standard deviation: {std_dev:.2f}")\n\n# Additional insights\nprint(f"Range: {max(scores) - min(scores)}")\nprint(f"Number of scores above average: {sum(1 for score in scores if score > mean_score)}")\n'})}),"\n",(0,i.jsx)(n.p,{children:"This approach ensures accurate calculations while providing interpretable results."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'\n### Logical Reasoning and Puzzles\n\n```text\nProblem: "In a classroom, every student likes either math or science (or both). 20 students like math, 15 students like science, and 8 students like both. How many students are in the classroom?"\n\nPAL Approach:\n```python\n# Use set theory principles\nmath_lovers = 20\nscience_lovers = 15\nboth_lovers = 8\n\n# Students who like only math\nonly_math = math_lovers - both_lovers\nprint(f"Students who like only math: {only_math}")\n\n# Students who like only science\nonly_science = science_lovers - both_lovers\nprint(f"Students who like only science: {only_science}")\n\n# Total students using inclusion-exclusion principle\ntotal_students = only_math + only_science + both_lovers\nprint(f"Total students: {total_students}")\n\n# Verification using set union formula\nverification = math_lovers + science_lovers - both_lovers\nprint(f"Verification: {verification}")\n'})}),"\n",(0,i.jsx)(n.p,{children:"Answer: There are 27 students in the classroom."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'\n## Advanced PAL Techniques\n\n### Multi-Step Problem Decomposition\n\n```text\nProblem: "A company\'s revenue grows by 15% each year. If the current revenue is $200,000, what will the revenue be after 5 years, and how much total revenue will they earn over these 5 years?"\n\nPAL Approach:\n```python\n# Initial parameters\ninitial_revenue = 200000\ngrowth_rate = 0.15\nyears = 5\n\n# Calculate year-by-year revenue\nrevenues = []\ntotal_revenue = 0\n\nfor year in range(1, years + 1):\n    current_year_revenue = initial_revenue * (1 + growth_rate) ** year\n    revenues.append(current_year_revenue)\n    total_revenue += current_year_revenue\n    print(f"Year {year}: ${current_year_revenue:,.2f}")\n\nprint(f"\\nRevenue after 5 years: ${revenues[-1]:,.2f}")\nprint(f"Total revenue over 5 years: ${total_revenue:,.2f}")\n\n# Calculate percentage increase\npercentage_increase = ((revenues[-1] - initial_revenue) / initial_revenue) * 100\nprint(f"Total percentage increase: {percentage_increase:.1f}%")\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'\n### Error Handling and Validation\n\n```text\nProblem: "Calculate the average speed for a trip where you drive 150 miles in 2.5 hours, then 200 miles in 3 hours."\n\nPAL Approach with validation:\n```python\n# Trip data\ntrip1_distance = 150  # miles\ntrip1_time = 2.5      # hours\ntrip2_distance = 200  # miles\ntrip2_time = 3        # hours\n\n# Validate inputs\nif trip1_time <= 0 or trip2_time <= 0:\n    raise ValueError("Time cannot be zero or negative")\n\n# Calculate total distance and time\ntotal_distance = trip1_distance + trip2_distance\ntotal_time = trip1_time + trip2_time\n\nprint(f"Total distance: {total_distance} miles")\nprint(f"Total time: {total_time} hours")\n\n# Calculate average speed\naverage_speed = total_distance / total_time\nprint(f"Average speed: {average_speed:.2f} mph")\n\n# Additional insights\nspeed1 = trip1_distance / trip1_time\nspeed2 = trip2_distance / trip2_time\nprint(f"Speed for trip 1: {speed1:.2f} mph")\nprint(f"Speed for trip 2: {speed2:.2f} mph")\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'\n### Integration with External Libraries\n\n```text\nProblem: "Analyze the trend in the following monthly sales data and predict next month\'s sales: [12000, 13500, 11800, 14200, 15100, 13900, 16500, 17200]"\n\nPAL Approach:\n```python\nimport numpy as np\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\n# Sales data\nsales = [12000, 13500, 11800, 14200, 15100, 13900, 16500, 17200]\nmonths = list(range(1, len(sales) + 1))\n\n# Perform linear regression\nslope, intercept, r_value, p_value, std_err = stats.linregress(months, sales)\n\nprint(f"Trend analysis:")\nprint(f"Average monthly growth: ${slope:.2f}")\nprint(f"R-squared: {r_value**2:.3f}")\nprint(f"Correlation strength: {\'Strong\' if abs(r_value) > 0.7 else \'Moderate\' if abs(r_value) > 0.5 else \'Weak\'}")\n\n# Predict next month\nnext_month = len(sales) + 1\npredicted_sales = slope * next_month + intercept\nprint(f"\\nPredicted sales for month {next_month}: ${predicted_sales:.2f}")\n\n# Calculate confidence interval (simplified)\nresiduals = [sales[i] - (slope * (i+1) + intercept) for i in range(len(sales))]\nstd_residual = np.std(residuals)\nconfidence_interval = 1.96 * std_residual  # 95% confidence\nprint(f"95% confidence interval: ${predicted_sales - confidence_interval:.2f} - ${predicted_sales + confidence_interval:.2f}")\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'\n## Best Practices for PAL Implementation\n\n### Code Quality and Readability\n\n- **Use descriptive variable names** that clearly indicate what each variable represents\n- **Add comments** to explain complex logic or calculations\n- **Structure code logically** with clear steps and intermediate outputs\n- **Include print statements** to show intermediate results for transparency\n\n### Error Prevention and Handling\n\n- **Validate inputs** before performing calculations\n- **Handle edge cases** explicitly (e.g., division by zero, negative values where inappropriate)\n- **Use appropriate data types** (int vs float) based on the problem context\n- **Test with simple cases** to verify the logic works correctly\n\n### Integration Strategies\n\n```text\nHybrid Natural Language + Code Approach:\n\nProblem: "Analyze customer satisfaction data"\n\nStep 1: Natural language reasoning\n"To analyze customer satisfaction, I need to calculate summary statistics and identify patterns."\n\nStep 2: Code implementation\n```python\nsatisfaction_scores = [4.2, 3.8, 4.5, 3.9, 4.1, 3.7, 4.3, 4.0, 4.4, 3.6]\n# [calculation code here]\n'})}),"\n",(0,i.jsx)(n.p,{children:'Step 3: Natural language interpretation\n"The analysis shows that customer satisfaction is generally positive with an average score of 4.05..."'}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"\n## Domain-Specific Applications\n\n### Financial Calculations\n\n```text\nCompound interest, loan amortization, investment portfolio analysis:\n- Precise monetary calculations\n- Tax implications\n- Risk assessments\n- Return on investment calculations\n"})}),"\n",(0,i.jsx)(n.h3,{id:"scientific-computing",children:"Scientific Computing"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:"Unit conversions, statistical analysis, experimental data processing:\n- Measurement conversions\n- Statistical significance testing\n- Data visualization\n- Hypothesis testing\n"})}),"\n",(0,i.jsx)(n.h3,{id:"operations-research",children:"Operations Research"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:"Optimization problems, scheduling, resource allocation:\n- Linear programming\n- Scheduling algorithms\n- Inventory management\n- Cost optimization\n"})}),"\n",(0,i.jsx)(n.h2,{id:"limitations-and-considerations",children:"Limitations and Considerations"}),"\n",(0,i.jsx)(n.h3,{id:"execution-environment-requirements",children:"Execution Environment Requirements"}),"\n",(0,i.jsx)(n.p,{children:"PAL requires a code execution environment, which may not always be available:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Sandbox security"}),": Ensuring safe code execution"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Library availability"}),": Access to necessary programming libraries"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Performance constraints"}),": Execution time and memory limits"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"code-generation-quality",children:"Code Generation Quality"}),"\n",(0,i.jsx)(n.p,{children:"The effectiveness of PAL depends on the model's ability to generate correct code:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Syntax errors"}),": May require debugging and correction"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Logic errors"}),": Can lead to incorrect results despite syntactically correct code"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Edge case handling"}),": May miss important boundary conditions"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"when-not-to-use-pal",children:"When NOT to Use PAL"}),"\n",(0,i.jsx)(n.p,{children:"PAL may not be appropriate for:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Simple arithmetic that doesn't require external execution"}),"\n",(0,i.jsx)(n.li,{children:"Purely conceptual or philosophical questions"}),"\n",(0,i.jsx)(n.li,{children:"Tasks requiring real-time interaction or dynamic user input"}),"\n",(0,i.jsx)(n.li,{children:"Problems where the reasoning process is more important than the final answer"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"integration-with-other-techniques",children:"Integration with Other Techniques"}),"\n",(0,i.jsx)(n.h3,{id:"pal--chain-of-thought",children:"PAL + Chain-of-Thought"}),"\n",(0,i.jsx)(n.p,{children:"Combining structured reasoning with programmatic execution:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:'"Let me think through this step by step, then write code to verify my reasoning..."\n1. Analyze the problem structure\n2. Identify the mathematical relationships\n3. Write code to implement the solution\n4. Interpret the results in context\n'})}),"\n",(0,i.jsx)(n.h3,{id:"pal--self-consistency",children:"PAL + Self-Consistency"}),"\n",(0,i.jsx)(n.p,{children:"Using multiple code implementations to verify results:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:"Generate 3 different code approaches to solve the same problem, then compare results for consistency.\n"})}),"\n",(0,i.jsx)(n.h3,{id:"pal--few-shot-learning",children:"PAL + Few-Shot Learning"}),"\n",(0,i.jsx)(n.p,{children:"Providing examples of effective code patterns for similar problems:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:"Example 1: [Problem type A with code solution]\nExample 2: [Problem type A with code solution]\nNow solve: [New problem of type A]\n"})}),"\n",(0,i.jsx)(n.h2,{id:"future-developments",children:"Future Developments"}),"\n",(0,i.jsx)(n.p,{children:"Research directions for improving PAL:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Automated debugging"}),": Self-correcting code generation"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Multi-language support"}),": Choosing optimal programming languages for different problem types"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Interactive execution"}),": Real-time code modification and testing"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Visual integration"}),": Combining code with charts and visualizations"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"pal-workflow-diagram",children:"PAL Workflow Diagram"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"PAL Program-Aided Language Models Framework",src:t(8793).A+"",width:"822",height:"606"})}),"\n",(0,i.jsx)(n.p,{children:"The diagram above shows the PAL (Program-aided Language Models) framework that leverages language models to generate programming language statements. The following illustrates the PAL process:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'Problem Input: "Calculate compound interest for $1000 at 5% for 3 years"\n    \u2502\n    \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502              LANGUAGE MODEL                         \u2502\n\u2502 "I need to write code to solve this step by step"   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n    \u2502\n    \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                CODE GENERATION                      \u2502\n\u2502                                                     \u2502\n\u2502 ```python                                           \u2502\n\u2502 principal = 1000                                    \u2502\n\u2502 rate = 0.05                                         \u2502\n\u2502 time = 3                                            \u2502\n\u2502 compound_interest = principal * (1 + rate) ** time  \u2502\n\u2502 final_amount = compound_interest                    \u2502\n\u2502 interest_earned = final_amount - principal          \u2502\n\u2502 print(f"Final amount: ${final_amount:.2f}")         \u2502\n\u2502 print(f"Interest earned: ${interest_earned:.2f}")   \u2502\n\u2502 ```                                                 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n    \u2502\n    \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502              CODE EXECUTION                         \u2502\n\u2502                                                     \u2502\n\u2502 Output:                                             \u2502\n\u2502 Final amount: $1157.63                              \u2502\n\u2502 Interest earned: $157.63                            \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n    \u2502\n    \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502              RESULT INTEGRATION                     \u2502\n\u2502                                                     \u2502\n\u2502 "Based on the calculation, $1000 invested at 5%    \u2502\n\u2502 annual compound interest for 3 years will grow to  \u2502\n\u2502 $1157.63, earning $157.63 in interest."            \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n'})}),"\n",(0,i.jsx)(n.p,{children:"This workflow ensures mathematical accuracy while maintaining natural language understanding."}),"\n",(0,i.jsx)(n.h2,{id:"references",children:"References"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Gao, L., et al. (2022). PAL: Program-aided Language Models. arXiv preprint arXiv:2211.10435"}),"\n",(0,i.jsx)(n.li,{children:"Chen, W., et al. (2022). Program of Thoughts Prompting: Disentangling Computation from Reasoning for Numerical Reasoning Tasks. arXiv preprint arXiv:2211.12588"}),"\n",(0,i.jsx)(n.li,{children:"Austin, J., et al. (2021). Program Synthesis with Large Language Models. arXiv preprint arXiv:2108.07732"}),"\n",(0,i.jsx)(n.li,{children:"Li, Y., et al. (2022). Competition-Level Code Generation with AlphaCode. Science"}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8793:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/pal-f927e193a5a6dafe481aada4f9168625.png"},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>o});var i=t(6540);const a={},r=i.createContext(a);function s(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);