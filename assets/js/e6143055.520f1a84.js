"use strict";(self.webpackChunkentaingine_docs=self.webpackChunkentaingine_docs||[]).push([[1718],{4501:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>d,contentTitle:()=>o,default:()=>p,frontMatter:()=>r,metadata:()=>c,toc:()=>l});var t=n(4848),i=n(8453);const r={sidebar_position:1,title:"Process API Documentation"},o="Process API",c={id:"developer-guide/api-overview-and-authentication",title:"Process API Documentation",description:"This API provides endpoints for managing processes using Machine-to-Machine communication. The following documentation explains how to use the API, including detailed descriptions of each endpoint and the Data Transfer Objects (DTOs) used.",source:"@site/docs/developer-guide/api-overview-and-authentication.md",sourceDirName:"developer-guide",slug:"/developer-guide/api-overview-and-authentication",permalink:"/developer-guide/api-overview-and-authentication",draft:!1,unlisted:!1,editUrl:"https://github.com/entAIngine/entaingine-docs/tree/main/docs/developer-guide/api-overview-and-authentication.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,title:"Process API Documentation"},sidebar:"tutorialSidebar",previous:{title:"Developer Guide",permalink:"/category/developer-guide"},next:{title:"Integrating with entAIngine",permalink:"/developer-guide/integrating-with-entAIngine"}},d={},l=[{value:"Authentication",id:"authentication",level:2},{value:"Example Request",id:"example-request",level:3},{value:"Endpoints",id:"endpoints",level:2},{value:"Create a Process",id:"create-a-process",level:3},{value:"Get a Process by ID",id:"get-a-process-by-id",level:3},{value:"Get Inputs for a Process",id:"get-inputs-for-a-process",level:3},{value:"Get Outputs for a Process",id:"get-outputs-for-a-process",level:3},{value:"Data Transfer Objects (DTOs)",id:"data-transfer-objects-dtos",level:2},{value:"InputDTO",id:"inputdto",level:3},{value:"OutputDTO",id:"outputdto",level:3},{value:"OutputResponseDTO",id:"outputresponsedto",level:3},{value:"ProcessDTO",id:"processdto",level:3},{value:"ProcessRequestDTO",id:"processrequestdto",level:3},{value:"ProcessResponseDTO",id:"processresponsedto",level:3},{value:"Get a Process by ID",id:"get-a-process-by-id-1",level:3},{value:"Get Inputs for a Process",id:"get-inputs-for-a-process-1",level:3},{value:"Get Outputs for a Process",id:"get-outputs-for-a-process-1",level:3}];function a(e){const s={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.h1,{id:"process-api",children:"Process API"}),"\n",(0,t.jsx)(s.p,{children:"This API provides endpoints for managing processes using Machine-to-Machine communication. The following documentation explains how to use the API, including detailed descriptions of each endpoint and the Data Transfer Objects (DTOs) used."}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.a,{href:"https://d1wezafd7fvhpd.cloudfront.net/prod/aiengine/swagger-ui/index.html#",children:"View the Public API Documentation"})}),"\n",(0,t.jsx)(s.h2,{id:"authentication",children:"Authentication"}),"\n",(0,t.jsx)(s.p,{children:"To make REST calls, you need to pass an API Key generated from the Frontend Component of entAIngine Studio. Ensure you select the correct space, as API keys are specific to each space. Note that API keys are displayed only once during generation; if you lose your key, you will need to generate a new one."}),"\n",(0,t.jsxs)(s.p,{children:["Include the API Key in the ",(0,t.jsx)(s.code,{children:"Authorization"})," header of your request as follows:"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-http",children:"Authorization: Bearer 0123a.abcd1234TestAPIkey\n"})}),"\n",(0,t.jsx)(s.h3,{id:"example-request",children:"Example Request"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-bash",children:'curl -X \'POST\' \\\n  \'https://d1wezafd7fvhpd.cloudfront.net/prod/aiengine/api/v1/m2m/processes\' \\\n  -H \'accept: application/json\' \\\n  -H \'Authorization: Bearer 0123a.abcd1234TestAPIkey\' \\\n  -H \'Content-Type: application/json\' \\\n  -d \'{\n  "description": "Workflow processing",\n  "processTemplate": 10001,\n  "inputs": [\n    {\n      "name": "FILE_URL",\n      "value": "www.example.com/file.pdf"\n    },\n    {\n      "name": "JSON_TEMPLATE_DESCRIPTION",\n      "value": "www.example.com/template_description.json"\n    },\n    {\n      "name": "EXAMPLE_TEXT",\n      "value": "this is my example text"\n    }\n  ],\n  "spaceId": ".entaingine.test",\n  "private": false\n}\'\n'})}),"\n",(0,t.jsx)(s.h2,{id:"endpoints",children:"Endpoints"}),"\n",(0,t.jsx)(s.h3,{id:"create-a-process",children:"Create a Process"}),"\n",(0,t.jsxs)(s.p,{children:["Creates a new process based on the provided ",(0,t.jsx)(s.code,{children:"ProcessRequestDTO"}),"."]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Endpoint:"})," ",(0,t.jsx)(s.code,{children:"POST /api/v1/m2m/processes"})]}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Request Body:"})}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-json",children:'{\n  "description": "Data processing workflow",\n  "processTemplate": 123,\n  "inputs": [\n    {\n      "name": "input_1",\n      "value": "sample_value"\n    }\n  ],\n  "isPrivate": true,\n  "spaceId": "space_123"\n}\n'})}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Response:"})}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-json",children:'{\n  "id": 1,\n  "description": "Data processing workflow",\n  "processOutputUrl": null,\n  "processOutputText": null,\n  "spaceId": "space_123",\n  "createdBy": "user_123",\n  "gigId": null,\n  "processTemplate": 123,\n  "errorMessage": null,\n  "isPrivate": true,\n  "dateCreated": "2023-01-01T10:00:00Z",\n  "lastUpdated": "2023-01-01T10:00:00Z"\n}\n'})}),"\n",(0,t.jsx)(s.h3,{id:"get-a-process-by-id",children:"Get a Process by ID"}),"\n",(0,t.jsx)(s.p,{children:"Retrieves the process details based on the provided ID."}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Endpoint:"})," ",(0,t.jsx)(s.code,{children:"GET /api/v1/m2m/processes/{id}"})]}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Response:"})}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-json",children:'{\n  "id": 1,\n  "description": "Data processing workflow",\n  "processOutputUrl": "http://example.com/output.mp3",\n  "processOutputText": "Processing completed successfully",\n  "spaceId": "space_123",\n  "createdBy": "user_123",\n  "processTemplate": 123,\n  "errorMessage": null,\n  "isPrivate": true,\n  "dateCreated": "2023-01-01T10:00:00Z",\n  "lastUpdated": "2023-01-01T10:00:00Z",\n  "totalExecutionTime": 120000\n}\n'})}),"\n",(0,t.jsx)(s.h3,{id:"get-inputs-for-a-process",children:"Get Inputs for a Process"}),"\n",(0,t.jsx)(s.p,{children:"Retrieves the list of inputs for the specified process ID."}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Endpoint:"})," ",(0,t.jsx)(s.code,{children:"GET /api/v1/m2m/processes/{id}/inputs"})]}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Response:"})}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-json",children:'[\n  {\n    "id": 1,\n    "name": "input_1",\n    "value": "sample_value"\n  }\n]\n'})}),"\n",(0,t.jsx)(s.h3,{id:"get-outputs-for-a-process",children:"Get Outputs for a Process"}),"\n",(0,t.jsx)(s.p,{children:"Retrieves the list of outputs for the specified process ID."}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Endpoint:"})," ",(0,t.jsx)(s.code,{children:"GET /api/v1/m2m/processes/{id}/tasks/outputs"})]}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Response:"})}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-json",children:'{\n  "outputs": [\n    {\n      "id": 1,\n      "taskId": 101,\n      "taskPosition": 1,\n      "position": 1,\n      "role": "assistant",\n      "outputText": "Processing completed successfully.",\n      "outputUrl": "http://example.com/output.mp3",\n      "chunkSimilarityMetadata": {\n        "chunk1": "value1",\n        "chunk2": "value2"\n      },\n      "executionTime": 5000\n    }\n  ],\n  "isFailed": false,\n  "totalExecutionTime": 120000\n}\n'})}),"\n",(0,t.jsx)(s.h2,{id:"data-transfer-objects-dtos",children:"Data Transfer Objects (DTOs)"}),"\n",(0,t.jsx)(s.p,{children:"This section provides detailed descriptions of the DTOs used in the Process API. Understanding these objects and their fields is essential for making accurate API requests and interpreting responses."}),"\n",(0,t.jsx)(s.h3,{id:"inputdto",children:"InputDTO"}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.code,{children:"InputDTO"})," represents an input for a process."]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"id"}),": Automatically generated unique identifier of the input. No need to pass it if you are creating a process. ",(0,t.jsxs)(s.em,{children:["(Example: ",(0,t.jsx)(s.code,{children:"1"}),")"]})]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"name"}),": Name of the input from the input template. ",(0,t.jsxs)(s.em,{children:["(Example: ",(0,t.jsx)(s.code,{children:"FILE_URL"}),")"]})]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"value"}),": Value of the input. ",(0,t.jsxs)(s.em,{children:["(Example: ",(0,t.jsx)(s.code,{children:"www.example.com/fileurl.pdf"}),")"]})]}),"\n"]}),"\n",(0,t.jsx)(s.h3,{id:"outputdto",children:"OutputDTO"}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.code,{children:"OutputDTO"})," represents an output generated by a process."]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"id"}),": Unique identifier of the output. ",(0,t.jsxs)(s.em,{children:["(Example: ",(0,t.jsx)(s.code,{children:"1"}),")"]})]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"taskId"}),": Identifier of the associated task. ",(0,t.jsxs)(s.em,{children:["(Example: ",(0,t.jsx)(s.code,{children:"101"}),")"]})]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"taskPosition"}),": Position of the task within the process. ",(0,t.jsxs)(s.em,{children:["(Example: ",(0,t.jsx)(s.code,{children:"1"}),")"]})]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"position"}),": Position of the output within the task. ",(0,t.jsxs)(s.em,{children:["(Example: ",(0,t.jsx)(s.code,{children:"1"}),")"]})]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"role"}),": Role of the output within the process, e.g., assistant, user, system. ",(0,t.jsxs)(s.em,{children:["(Example: ",(0,t.jsx)(s.code,{children:"assistant"}),")"]})]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"outputText"}),": Text content of the output. ",(0,t.jsxs)(s.em,{children:["(Example: ",(0,t.jsx)(s.code,{children:"Processing completed successfully."}),")"]})]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"outputUrl"}),": URL of the output resource if the file was supposed to be generated by the task. ",(0,t.jsxs)(s.em,{children:["(Example: ",(0,t.jsx)(s.code,{children:"http://example.com/output.pdf"}),")"]})]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"chunkSimilarityMetadata"}),": Metadata for chunk similarity, represented as a map of key-value pairs. ",(0,t.jsxs)(s.em,{children:["(Example: ",(0,t.jsx)(s.code,{children:'{"chunk1":"value1", "chunk2":"value2"}'}),")"]})]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"executionTime"}),": Execution time of the task that generated the output, in milliseconds. ",(0,t.jsxs)(s.em,{children:["(Example: ",(0,t.jsx)(s.code,{children:"5000"}),")"]})]}),"\n"]}),"\n",(0,t.jsx)(s.h3,{id:"outputresponsedto",children:"OutputResponseDTO"}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.code,{children:"OutputResponseDTO"})," represents the response containing outputs for a process."]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"outputs"}),": List of outputs generated by the process."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"isFailed"}),": Indicates if the process has failed. ",(0,t.jsxs)(s.em,{children:["(Example: ",(0,t.jsx)(s.code,{children:"false"}),")"]})]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"totalExecutionTime"}),": Total execution time of the process in milliseconds. ",(0,t.jsxs)(s.em,{children:["(Example: ",(0,t.jsx)(s.code,{children:"120000"}),")"]})]}),"\n"]}),"\n",(0,t.jsx)(s.h3,{id:"processdto",children:"ProcessDTO"}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.code,{children:"ProcessDTO"})," represents the data structure of a process."]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"id"}),": Unique identifier of the process. ",(0,t.jsxs)(s.em,{children:["(Example: ",(0,t.jsx)(s.code,{children:"1001"}),")"]})]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"description"}),": Description of the process. ",(0,t.jsxs)(s.em,{children:["(Example: ",(0,t.jsx)(s.code,{children:"Extraction of the information from the document 1"}),")"]})]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"processOutputUrl"}),": URL of the process output. If the process is supposed to generate a file (e.g., image generation or speech generation), the file URL will be in this field. ",(0,t.jsxs)(s.em,{children:["(Example: ",(0,t.jsx)(s.code,{children:"http://example.com/output"}),")"]})]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"processOutputText"}),": Final text output of the process. ",(0,t.jsxs)(s.em,{children:["(Example: ",(0,t.jsx)(s.code,{children:"This document summarizes how entAIngine can be used for..."}),")"]})]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"spaceId"}),": Space identifier associated with the process. ",(0,t.jsxs)(s.em,{children:["(Example: ",(0,t.jsx)(s.code,{children:".entaingine.test-space"}),")"]})]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"createdBy"}),": Sub of the user who created the process. ",(0,t.jsxs)(s.em,{children:["(Example: ",(0,t.jsx)(s.code,{children:"user_123"}),")"]})]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"processTemplate"}),": Template identifier for the process. The process will be created based on this template. ",(0,t.jsxs)(s.em,{children:["(Example: ",(0,t.jsx)(s.code,{children:"10002"}),")"]})]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"errorMessage"}),": Error message if the process fails. ",(0,t.jsxs)(s.em,{children:["(Example: ",(0,t.jsx)(s.code,{children:"An error occurred during processing"}),")"]})]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"isPrivate"}),": Indicates if the process is private or available for all users in the space. ",(0,t.jsxs)(s.em,{children:["(Example: ",(0,t.jsx)(s.code,{children:"true"}),")"]})]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"dateCreated"}),": Date and time when the process was created. ",(0,t.jsxs)(s.em,{children:["(Example: ",(0,t.jsx)(s.code,{children:"2023-01-01T10:00:00Z"}),")"]})]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"lastUpdated"}),": Date and time when the process was last updated. ",(0,t.jsxs)(s.em,{children:["(Example: ",(0,t.jsx)(s.code,{children:"2023-01-02T10:00:00Z"}),")"]})]}),"\n"]}),"\n",(0,t.jsx)(s.h3,{id:"processrequestdto",children:"ProcessRequestDTO"}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.code,{children:"ProcessRequestDTO"})," represents the data structure required to create a new process."]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"description"}),": Description of the process. ",(0,t.jsxs)(s.em,{children:["(Example: ",(0,t.jsx)(s.code,{children:"Data processing workflow"}),")"]})]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"processTemplate"}),": Template identifier for the process. ",(0,t.jsxs)(s.em,{children:["(Example: ",(0,t.jsx)(s.code,{children:"template_123"}),")"]})]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"inputs"}),": List of inputs for the process."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"isPrivate"}),": Indicates if the process is private or available for all users in the space. ",(0,t.jsxs)(s.em,{children:["(Example: ",(0,t.jsx)(s.code,{children:"true"}),")"]})]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"spaceId"}),": Space identifier associated with the process. ",(0,t.jsxs)(s.em,{children:["(Example: ",(0,t.jsx)(s.code,{children:".entaingine.test-space"}),")"]})]}),"\n"]}),"\n",(0,t.jsx)(s.h3,{id:"processresponsedto",children:"ProcessResponseDTO"}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.code,{children:"ProcessResponseDTO"})," extends ",(0,t.jsx)(s.code,{children:"ProcessDTO"})," with additional fields."]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"totalExecutionTime"}),": Total execution time of the process in milliseconds. ",(0,t.jsxs)(s.em,{children:["(Example: ",(0,t.jsx)(s.code,{children:"120000"}),")"]})]}),"\n"]}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(s.p,{children:"This detailed description of the DTOs should help you understand how to structure your API requests and interpret the responses effectively."}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{children:'\n## Error Handling\n\nThe API returns standard HTTP status codes to indicate the success or failure of an API request. Here are some common status codes:\n\n- `200 OK`: The request was successful.\n- `201 Created`: The resource was created successfully.\n- `400 Bad Request`: The request was invalid or cannot be otherwise served.\n- `401 Unauthorized`: Authentication credentials were missing or incorrect.\n- `403 Forbidden`: The request is understood, but it has been refused or access is not allowed.\n- `404 Not Found`: The resource could not be found.\n- `500 Internal Server Error`: An error occurred on the server.\n\n## Example Requests\n\n### Create a Process\n\n```http\nPOST /api/v1/m2m/processes HTTP/1.1\nHost: example.com\nContent-Type: application/json\nAuthorization: Bearer 0123a.abcd1234TestAPIkey\n\n{\n  "description": "Data processing workflow",\n  "processTemplate": 123,\n  "inputs": [\n    {\n      "name": "input_1",\n      "value": "sample_value"\n    }\n  ],\n  "isPrivate": true,\n  "spaceId": "space_123"\n}\n'})}),"\n",(0,t.jsx)(s.h3,{id:"get-a-process-by-id-1",children:"Get a Process by ID"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-http",children:"GET /api/v1/m2m/processes/1 HTTP/1.1\nHost: example.com\nAuthorization: Bearer 0123a.abcd1234TestAPIkey\n"})}),"\n",(0,t.jsx)(s.h3,{id:"get-inputs-for-a-process-1",children:"Get Inputs for a Process"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-http",children:"GET /api/v1/m2m/processes/1/inputs HTTP/1.1\nHost: example.com\nAuthorization: Bearer 0123a.abcd1234TestAPIkey\n"})}),"\n",(0,t.jsx)(s.h3,{id:"get-outputs-for-a-process-1",children:"Get Outputs for a Process"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-http",children:"GET /api/v1/m2m/processes/1/tasks/outputs HTTP/1.1\nHost: example.com\nAuthorization: Bearer 0123a.abcd1234TestAPIkey\n"})}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(s.p,{children:"This documentation should help you understand and utilize the M2M Process API effectively. For any further questions or support, please refer to the official API documentation or contact our support team."})]})}function p(e={}){const{wrapper:s}={...(0,i.R)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(a,{...e})}):a(e)}},8453:(e,s,n)=>{n.d(s,{R:()=>o,x:()=>c});var t=n(6540);const i={},r=t.createContext(i);function o(e){const s=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function c(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),t.createElement(r.Provider,{value:s},e.children)}}}]);